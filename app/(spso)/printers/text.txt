"use client"
import React, { useEffect, useState } from 'react';
import { Card } from 'primereact/card';
import { Button } from 'primereact/button';
import { DataTableFilterMeta } from 'primereact/datatable';
import { FilterMatchMode, FilterOperator } from 'primereact/api';
import { DataTable } from 'primereact/datatable';
import { Column, ColumnFilterElementTemplateOptions } from 'primereact/column';
import { InputText } from 'primereact/inputtext';
import { Calendar } from 'primereact/calendar';
import { ProgressBar } from 'primereact/progressbar';
import { Slider, SliderChangeEvent } from 'primereact/slider';
import { Tag } from 'primereact/tag';
import { Dropdown, DropdownChangeEvent } from 'primereact/dropdown';
import { Dialog } from 'primereact/dialog';
import { InputNumber } from 'primereact/inputnumber';


import './printer.scss'
import { SampleData } from './service/SampleData';

interface Printer {
    id: number,
    name: string,
    type: string,
    numOfPrint: number,
    status: boolean,
    activate: boolean
}
export default function PrintsPage() {
    let emptyPrinter: Printer = {
        id: 0,
        name: '',
        type: '',
        numOfPrint: 0,
        status: false,
        activate: false
    }

    const [prints, setPrints] = useState<Printer[]>([]);
    const [print, setPrint] = useState<Printer>(emptyPrinter)

    const [submitted, setSubmitted] = useState<boolean>(false);
    const [selectedPrinters, setSelectedPrinters] = useState<Printer[]>([]);

    const [newPrinterDialog, setNewPrinterDialog] = useState<boolean>(false);
    const [deletePrinterDialog, setDeletePrinterDialog] = useState<boolean>(false);
    const [filters, setFilters] = useState<any>({
        global: { value: '', matchMode: FilterMatchMode.CONTAINS },
        number: { operator: FilterOperator.AND, constraints: [{ value: null, matchMode: FilterMatchMode.STARTS_WITH }] },
        date: { operator: FilterOperator.AND, constraints: [{ value: null, matchMode: FilterMatchMode.STARTS_WITH }] },
        paid: { operator: FilterOperator.AND, constraints: [{ value: null, matchMode: FilterMatchMode.STARTS_WITH }] },
    })
    const [globalFilterValue, setGlobalFilterValue] = useState<string>('');

    const [infoVisible, setInfoVisible] = useState(false);
    const [selectedRow, setSelectedRow] = useState<Printer | null>(null);


    const getSeverity = (status: boolean) => {
        switch (status) {
            case true:
                return 'success';

            case false:
                return 'danger';
        }
    };

    useEffect(() => {
        SampleData.getFullData().then((data) => setPrints(getPrints(data)));
    }, []);

    const getPrints = (data: Printer[]) => {
        return [...(data || [])].map((d) => {
            return d;
        })
    }

    const openNew = () => {
        setPrint(emptyPrinter);
        setSubmitted(false);
        setNewPrinterDialog(true);
    };

    const onGlobalFilterChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const value = e.target.value;
        let _filters = { ...filters };

        if (_filters['global']) {
            _filters['global'].value = value;
        }

        setFilters(_filters);
        setGlobalFilterValue(value);
    };

    const renderHeader = () => {
        return (
            <div className='mb-4'>
                <h2 className='mb-4' style={{ color: '#6366f1', fontStyle: 'italic', fontWeight: '700' }}>Quản lý máy in</h2>
                <div className='header'>
                    <div className='header-left'>
                        <Button
                            label='Mới'
                            icon='pi pi-plus'
                            className='mr-2'
                            severity='success'
                            size='small'
                            onClick={openNew}
                        ></Button>
                        <Button
                            label='Xóa'
                            icon='pi pi-trash'
                            className='mr-2'
                            severity='danger'
                            size='small'
                            onClick={confirmDeleteSelected} disabled={!selectedPrinters || !selectedPrinters.length}
                        ></Button>
                    </div>
                    <div className='header-right'>
                        <InputText
                            value={globalFilterValue}
                            onChange={onGlobalFilterChange}
                            placeholder="Tìm kiếm"
                            style={{
                                borderRadius: '100px',
                            }} />
                    </div>
                </div>
            </div>

        );
    };

    const statusBodyTemplate = (rowData: Printer) => {
        return <Tag value={rowData.status ? "Đã kích hoạt" : "Chưa kích hoạt"} severity={getSeverity(rowData.status)} />;
    };

    const activateBodyTemplate = (rowData: Printer) => {
        return <Button
            icon='pi pi-play'
            rounded
            outlined
            size='small' />;
    };

    const infoBodyTemplate = (rowData: Printer) => {
        return <Button
            icon='pi pi-info'
            rounded
            outlined
            size='small'
            style={{
                padding: '12px',
                height: '5px',
                width: '5px'
            }}
            onClick={() => handleShowDetails(rowData)}
        />;
    };

    const handleShowDetails = (rowData: Printer) => {
        setSelectedRow(rowData);
        setInfoVisible(true);
    }

    const header = renderHeader();

    return (
        <div>
            <div className="card">
                {header}
                <DataTable value={prints} paginator rows={10}
                    paginatorTemplate="FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown"
                    rowsPerPageOptions={[10, 25, 50]} dataKey="id"
                    filters={filters} filterDisplay="menu" globalFilterFields={['number', 'date', 'paid']}
                    emptyMessage="Không có bản in gần đây." currentPageReportTemplate="Hiển thị {first} tới {last} trên {totalRecords}" >
                    <Column
                        field="name"
                        header="Tên máy in"
                        sortable
                        // filter filterPlaceholder="Search by name" 
                        style={{ minWidth: '8rem' }}
                    />
                    <Column
                        field="type"
                        header="Loại"
                        sortable
                        // filter filterPlaceholder="Search by name" 
                        style={{ minWidth: '8rem' }}
                    />
                    <Column
                        field="numOfPrint"
                        header="Số bản in"
                        sortable
                        filterPlaceholder="Search by number"
                        style={{ minWidth: '8rem' }} />
                    <Column
                        header="Trạng thái"
                        sortable
                        filterMenuStyle={{ width: '14rem' }}
                        style={{ minWidth: '8rem' }}
                        body={statusBodyTemplate}
                    // filter filterElement={statusFilterTemplate} 
                    />
                    <Column
                        style={{ minWidth: '3rem' }}
                        body={infoBodyTemplate}
                    />

                </DataTable >

            </div >

            <Dialog
                header="Máy in"
                visible={infoVisible}
                onHide={() => setInfoVisible(false)}>
                {selectedRow && (
                    <div>
                        <p><strong>ID:</strong> {selectedRow.id}</p>
                        <p><strong>Name:</strong> {selectedRow.name}</p>

                    </div>
                )}
            </Dialog>
        </div >
    );
};